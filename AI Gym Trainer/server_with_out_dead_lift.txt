from flask import Flask, request, jsonify
from flask_cors import CORS
import cv2
import numpy as np
import base64
import PoseModule as pm
import math  # Import the math module

app = Flask(__name__)
CORS(app)
detector = pm.poseDetector()  # Assuming you have defined the poseDetector class
dir = 0
count = 0

@app.route('/count_pushups', methods=['POST'])
def countPushUps():
    global detector, dir, count
    
    data = request.json
    img_str = data['img']
    img_bytes = base64.b64decode(img_str)
    img_np = np.frombuffer(img_bytes, dtype=np.uint8)
    img = cv2.imdecode(img_np, cv2.IMREAD_COLOR)
    lmList = data['lmList']
    detector.findPose(img, draw=False)
    lmList = detector.findPosition(img, draw=False)
    if lmList:
        a1 = detector.findAngle(img, 11, 13, 15)
        a2 = detector.findAngle(img, 16, 14, 12)
        per_val1 = int(np.interp(a1, (190, 280), (0, 100)))
        per_val2 = int(np.interp(a2, (70, 170), (100, 0)))
        if per_val1 == 100 and per_val2 == 100:
            if dir == 0:
                count += 1
                dir = 1
        elif per_val1 == 0 and per_val2 == 0:
            if dir == 1:
                dir = 0
                print(count)
        push_ups = count / 2  # Use math.floor to floor the count value
        text = f'push_ups : {int(push_ups)}'  # Update the text with the floored value
        text_color = (0, 0, 255)
        rectangle_color = (255, 0, 0)
        font = cv2.FONT_HERSHEY_SIMPLEX
        font_scale = 2
        thickness = 3
        text_size = cv2.getTextSize(text, font, font_scale, thickness)[0]
        text_origin = (209, 35)
        cv2.putText(img, text, text_origin, font, font_scale, text_color, thickness)
        (startX, startY) = text_origin
        endX = startX + text_size[0] + 10
        endY = startY - text_size[1] - 10
        cv2.rectangle(img, (startX, startY), (endX, endY), rectangle_color, thickness, cv2.FILLED)

    # Encode the processed image to JPEG format for sending as JSON
    _, img_encoded = cv2.imencode('.jpg', img)
    img_str = base64.b64encode(img_encoded).decode('utf-8')

    response_data = {
        'lmList': lmList,
        'count': count,  # Send the floored count value
        'img': img_str  # Sending back the processed image
    }
    return jsonify(response_data)

@app.route('/single-handed-curl', methods=['POST'])
def single_handed_curl():
    global detector, dir, count
    
    data = request.json
    img_str = data['img']
    img_bytes = base64.b64decode(img_str)
    img_np = np.frombuffer(img_bytes, dtype=np.uint8)
    img = cv2.imdecode(img_np, cv2.IMREAD_COLOR)
    lmList = data['lmList']
    detector.findPose(img, draw=False)
    lmList = detector.findPosition(img, draw=False)
    
    if len(lmList) != 0:
        angle = detector.findAngle(img, 12, 14, 16)
        per = np.interp(angle, (140, 50), (0, 100))
        
        # Update count based on angle and direction
        if per == 100:
            if dir == 0:
                count += 0.5
                dir = 1
        elif per == 0:
            if dir == 1:
                count += 0.5
                dir = 0
        else:
            print("Unexpected value of per:", per)
    
        print("Current count:", count)
        print("Current direction:", dir)

        # Check for wrong posture
        if angle < 140:
            Wrong_Posture(img)

        
        # Add count to the image
        cv2.putText(img, str(int(count)), (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 5, (255, 0, 0), 5, cv2.LINE_AA)

    return jsonify({'lmList': lmList, 'count': math.floor(count)})  # Floor the count value

@app.route('/reverse-fly', methods=['POST'])
def Reverse_Fly():
    global detector, dir, count
    
    data = request.json
    img_str = data['img']
    img_bytes = base64.b64decode(img_str)
    img_np = np.frombuffer(img_bytes, dtype=np.uint8)
    img = cv2.imdecode(img_np, cv2.IMREAD_COLOR)
    lmList = data['lmList']
    detector.findPose(img, draw=False)
    lmList = detector.findPosition(img, draw=False)
    
    if len(lmList) != 0:
        angle = detector.findAngle(img, 11, 13, 15)
        per = np.interp(angle, (180, 210), (0, 100))
        angle = detector.findAngle(img, 12, 14, 16)
        if per == 100:
            if dir == 0:
                count += 0.5
                dir = 1
        if per == 0:
            if dir == 1:
                count += 0.5
                dir = 0

        cv2.putText(img, str(int(count)), (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 5, (255, 0, 0), 5, cv2.LINE_AA)
    return jsonify({'lmList': lmList, 'count': math.floor(count)}) 


@app.route('/barbell-curl', methods=['POST'])
def barbell_curl():
    global detector, dir, count
    
    data = request.json
    img_str = data['img']
    img_bytes = base64.b64decode(img_str)
    img_np = np.frombuffer(img_bytes, dtype=np.uint8)
    img = cv2.imdecode(img_np, cv2.IMREAD_COLOR)
    lmList = data['lmList']
    detector.findPose(img, draw=False)
    lmList = detector.findPosition(img, draw=False)
    if len(lmList) != 0:
        angle = detector.findAngle(img, 12, 14, 16)
        per = np.interp(angle, (170, 50), (0, 100))

        if len(lmList) > 24:
            x, y = lmList[24][1:]
            x = x + 200
            FPangle = detector.findAngle(img, 12, 24, (x, y), True, True)
            print(FPangle)
            cv2.circle(img, (x, y), 5, (255, 0, 0), cv2.FILLED)

        if per == 100:
            if dir == 0:
                count += 0.5
                dir = 1
        if per == 0:
            if dir == 1:
                count += 0.5
                dir = 0

        PFangle = detector.findAngle(img, 12, 24, (x, y), True, True)
        if (PFangle < 90 or PFangle > 100):
            Wrong_Posture(img,"Wrong Angle")

        cv2.putText(img, str(int(count)), (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 5, (255, 0, 0), 5, cv2.LINE_AA)
    return jsonify({'lmList': lmList, 'count': math.floor(count)}) 


@app.route('/', methods = ['GET'])
def avtivee():
    return 'Server is activated'

if __name__ == '__main__':
    app.run(port=3355)
